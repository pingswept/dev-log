### Changing SPI speed ###

Master clock is 132 MHZ; CPU is 396 MHZ (3x MCK); crystal is 18.432 MHZ (MCK/7.16?).

SPI clock is MCK divided by 8 bit value stored in the SCBR field, which is part of the SPI_CSR0-SPI_CSR3 registers.

132/9 = 14.67 MHz, appears to be what is produced by 15 * 1000 * 1000 in driver code.

Minimum speed is 132/255 = 518 kHz.

```c
// Written by Nick Gammon, slightly modified by Brandon
// February 2011

#include <SPI.h>

char buf [100];
volatile byte pos;
volatile boolean process_it;

void setup (void)
{
  Serial.begin (115200);   // debugging

  // have to send on master in, *slave out*
  pinMode(MISO, OUTPUT);
  
  // turn on SPI in slave mode
  SPCR |= _BV(SPE);
  
  // get ready for an interrupt 
  pos = 0;   // buffer empty
  process_it = false;

  // now turn on interrupts
  SPI.attachInterrupt();

}  // end of setup


// SPI interrupt routine
ISR (SPI_STC_vect)
{
byte c = SPDR;  // grab byte from SPI Data Register
  
  // add to buffer if room
  if (pos < sizeof buf)
    {
    buf [pos++] = c;

    if (c == '!') \\ This line is weird. Requires two !! to trigger. Whatever.
      process_it = true;
      
    }  // end of room available
}  // end of interrupt routine SPI_STC_vect

// main loop - wait for flag set in interrupt routine
void loop (void)
{
  if (process_it)
    {
    buf [pos] = 0;  
    Serial.println (buf);
    pos = 0;
    process_it = false;
    }  // end of flag set
    
}  // end of loop

```

New version of spiWrite in Python

```python
def spiWrite(val, cs='0'):
    with open('/dev/spidev1.' + str(cs), 'w') as f:
        f.write(val)
        f.close()
```

Also, from Bash

```bash
echo -n "Text goes here" > > /dev/spidev1.0
```

The -n option prevents the emission of a newline character.